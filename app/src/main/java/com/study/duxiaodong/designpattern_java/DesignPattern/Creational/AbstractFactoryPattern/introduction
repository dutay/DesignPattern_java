1. 含义
    抽象工厂模式，即Abstract Factory Pattern，提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类；
    具体的工厂负责实现具体的产品实例。跟工厂方法比最大区别是可以一个工厂可以生产多种产品

2. 使用步骤
     1.创建抽象工厂类，定义具体工厂的公共接口；
     2.创建抽象产品族类 ，定义抽象产品的公共接口；
     3.创建抽象产品类 ，定义具体产品的公共接口；
     4.创建具体产品类（继承抽象产品类） & 定义生产的具体产品；
     5.创建具体工厂类（继承抽象工厂类），定义创建对应具体产品实例的方法；
     6.外界通过调用具体工厂类的方法，并调用其创建不同目标产品的方法创建不同具体产品类的实例

3. 优点
    1.更符合开-闭原则
      新增一种产品时，只需要增加相应的具体产品类和相应的工厂子类即可
    2.符合单一职责原则
      每个具体工厂类只负责创建对应的产品
    3.不使用静态工厂方法，可以形成基于继承的等级结构。
    4.降低耦合
      抽象工厂模式将具体产品的创建延迟到具体工厂的子类中，这样将对象的创建封装起来，
      可以减少客户端与具体产品类之间的依赖，从而使系统耦合度低，这样更有利于后期的维护和扩展；

4. 缺点
    1.抽象工厂模式很难支持新种类产品的变化。
      这是因为抽象工厂接口中已经确定了可以被创建的产品集合，如果需要添加新产品，此时就必须去修改抽象工厂的接口，
      这样就涉及到抽象工厂类的以及所有子类的改变，这样也就违背了“开发——封闭”原则。

5. 应用场景
    1.一个系统不要求依赖产品类实例如何被创建、组合和表达的表达，这点也是所有工厂模式应用的前提。
    2.这个系统有多个系列产品，而系统中只消费其中某一系列产品
    3.系统要求提供一个产品类的库，所有产品以同样的接口出现，客户端不需要依赖具体实现。



