1. 含义
    1.用原型实例指定创建对象的种类，并通过拷贝这些原型创建新的对象。
    原型模式涉及到浅拷贝跟深拷贝
    浅拷贝：只负责克隆按值传递的数据（比如基本数据类型、String类型），而不复制它所引用的对象，换言之，所有的对其他对象的引用都仍然指向原来的对象。
    深拷贝：除了浅度克隆要克隆的值外，还负责克隆引用类型的数据。那些引用其他对象的变量将指向被复制过的新对象，而不再是原有的那些被引用的对象。
           换言之，深度克隆把要复制的对象所引用的对象都复制了一遍，而这种对被引用到的对象的复制叫做间接复制。

2. 原型模式三角色
    1.Client：客户端角色。
    2.Prototype：抽象原型角色，抽象类或者接口，用来声明clone方法。
    3.ConcretePrototype：具体的原型类，是客户端角色使用的对象，即被复制的对象。

    需要注意的是，Prototype通常是不用自己定义的，因为拷贝这个操作十分常用，Java中就提供了Cloneable接口来支持拷贝操作，
    它就是原型模式中的Prototype。当然，原型模式也未必非得去实现Cloneable接口，也有其他的实现方式。

3. 优点
    1.原型模式是在内存中二进制流的拷贝，要比new一个对象的性能要好，特别是需要产生大量对象时。

4. 缺点
    1.直接在内存中拷贝，构造函数是不会执行的，这样就减少了约束，这既是优点也是缺点，需要在实际应用中去考量。

5. 应用场景
    1.如果类的初始化需要耗费较多的资源，那么可以通过原型拷贝避免这些消耗。
    2.通过new产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式。
    3.一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可以拷贝多个对象供调用者使用，即保护性拷贝。



