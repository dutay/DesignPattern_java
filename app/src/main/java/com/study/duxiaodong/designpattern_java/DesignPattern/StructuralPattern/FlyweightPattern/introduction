1. 含义
    享元模式：使用共享对象可有效的支持大量的细粒度的对象 比如Strng常量池，数据库连接池等
    上面定义中要求细粒度对象, 那么不可避免的使得对象数量多且性质相近, 我们将这些对象的信息分为两个部分:

    内部状态和外部状态：
        内部状态是对象可以共享出来的信息, 存储在享元对象内部并且不会随环境改变而改变. 如一个网站的个人用户信息.
        外部状态时对象得以依赖的一个标记,是随环境改变而改变的、不可以共享的状态. 如报考系统中的报考科目. 享元模式通常以外部状态为参考来限制对象产生数量
    说白了,内部状态就是每个对象都不同的属性,外部状态就是数量有限的属性, 如网站的类别等等


2. 具体结构
     Flyweight 抽象享元角色: 简单地说就是一个产品的抽象类,同时定义出对象的外部状态和内部状态的接口或实现
     ConcreteFlyweight 具体享元角色: 具体的一个产品类, 实现抽象角色定义的业务. 该角色需要注意的是内部状态处理应该与环境无关,不应该初恋一个操作改变了内部状态,同时修改了外部状态, 这是角色不允许的
     FlyweightFactory 享元工厂: 职责非常简单, 就是构造一个池容器,同时提供从池中获得对象的方法




3. 优点
    1.大大减少了对象的创建，降低了程序内存的占用，提高效率


4. 缺点
    1.提高了系统的复杂度。需要分离出内部状态和外部状态，而外部状态具有固化特性，不应该随着内部状态的改变而改变

5. 应用场景
    1.系统中存在大量的相似对象
    2.细粒度的对象都具备较接近的外部状态,而且内部状态与环境无关,也就是说对象没有特定身份
    3.需要缓冲池的场景



